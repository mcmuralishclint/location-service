// Code generated by mockery v2.20.0. DO NOT EDIT.

package config

import (
	domain "github.com/mcmuralishclint/location-service/app/location/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigInterface is an autogenerated mock type for the ConfigInterface type
type MockConfigInterface struct {
	mock.Mock
}

type MockConfigInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigInterface) EXPECT() *MockConfigInterface_Expecter {
	return &MockConfigInterface_Expecter{mock: &_m.Mock}
}

// LoadCacheConfig provides a mock function with given fields:
func (_m *MockConfigInterface) LoadCacheConfig() (domain.CacheRepository, error) {
	ret := _m.Called()

	var r0 domain.CacheRepository
	var r1 error
	if rf, ok := ret.Get(0).(func() (domain.CacheRepository, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() domain.CacheRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CacheRepository)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigInterface_LoadCacheConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadCacheConfig'
type MockConfigInterface_LoadCacheConfig_Call struct {
	*mock.Call
}

// LoadCacheConfig is a helper method to define mock.On call
func (_e *MockConfigInterface_Expecter) LoadCacheConfig() *MockConfigInterface_LoadCacheConfig_Call {
	return &MockConfigInterface_LoadCacheConfig_Call{Call: _e.mock.On("LoadCacheConfig")}
}

func (_c *MockConfigInterface_LoadCacheConfig_Call) Run(run func()) *MockConfigInterface_LoadCacheConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigInterface_LoadCacheConfig_Call) Return(_a0 domain.CacheRepository, _a1 error) *MockConfigInterface_LoadCacheConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigInterface_LoadCacheConfig_Call) RunAndReturn(run func() (domain.CacheRepository, error)) *MockConfigInterface_LoadCacheConfig_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfigs provides a mock function with given fields:
func (_m *MockConfigInterface) LoadConfigs() *ServiceConfig {
	ret := _m.Called()

	var r0 *ServiceConfig
	if rf, ok := ret.Get(0).(func() *ServiceConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceConfig)
		}
	}

	return r0
}

// MockConfigInterface_LoadConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfigs'
type MockConfigInterface_LoadConfigs_Call struct {
	*mock.Call
}

// LoadConfigs is a helper method to define mock.On call
func (_e *MockConfigInterface_Expecter) LoadConfigs() *MockConfigInterface_LoadConfigs_Call {
	return &MockConfigInterface_LoadConfigs_Call{Call: _e.mock.On("LoadConfigs")}
}

func (_c *MockConfigInterface_LoadConfigs_Call) Run(run func()) *MockConfigInterface_LoadConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigInterface_LoadConfigs_Call) Return(_a0 *ServiceConfig) *MockConfigInterface_LoadConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigInterface_LoadConfigs_Call) RunAndReturn(run func() *ServiceConfig) *MockConfigInterface_LoadConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// LoadLocationConfig provides a mock function with given fields:
func (_m *MockConfigInterface) LoadLocationConfig() (domain.AddressRepository, error) {
	ret := _m.Called()

	var r0 domain.AddressRepository
	var r1 error
	if rf, ok := ret.Get(0).(func() (domain.AddressRepository, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() domain.AddressRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.AddressRepository)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigInterface_LoadLocationConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadLocationConfig'
type MockConfigInterface_LoadLocationConfig_Call struct {
	*mock.Call
}

// LoadLocationConfig is a helper method to define mock.On call
func (_e *MockConfigInterface_Expecter) LoadLocationConfig() *MockConfigInterface_LoadLocationConfig_Call {
	return &MockConfigInterface_LoadLocationConfig_Call{Call: _e.mock.On("LoadLocationConfig")}
}

func (_c *MockConfigInterface_LoadLocationConfig_Call) Run(run func()) *MockConfigInterface_LoadLocationConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigInterface_LoadLocationConfig_Call) Return(_a0 domain.AddressRepository, _a1 error) *MockConfigInterface_LoadLocationConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigInterface_LoadLocationConfig_Call) RunAndReturn(run func() (domain.AddressRepository, error)) *MockConfigInterface_LoadLocationConfig_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockConfigInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockConfigInterface creates a new instance of MockConfigInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConfigInterface(t mockConstructorTestingTNewMockConfigInterface) *MockConfigInterface {
	mock := &MockConfigInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
