// Code generated by mockery v2.20.0. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockCacheRepository is an autogenerated mock type for the CacheRepository type
type MockCacheRepository struct {
	mock.Mock
}

type MockCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheRepository) EXPECT() *MockCacheRepository_Expecter {
	return &MockCacheRepository_Expecter{mock: &_m.Mock}
}

// GetAddress provides a mock function with given fields: _a0
func (_m *MockCacheRepository) GetAddress(_a0 string) (*Address, error) {
	ret := _m.Called(_a0)

	var r0 *Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Address, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *Address); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheRepository_GetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddress'
type MockCacheRepository_GetAddress_Call struct {
	*mock.Call
}

// GetAddress is a helper method to define mock.On call
//   - _a0 string
func (_e *MockCacheRepository_Expecter) GetAddress(_a0 interface{}) *MockCacheRepository_GetAddress_Call {
	return &MockCacheRepository_GetAddress_Call{Call: _e.mock.On("GetAddress", _a0)}
}

func (_c *MockCacheRepository_GetAddress_Call) Run(run func(_a0 string)) *MockCacheRepository_GetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCacheRepository_GetAddress_Call) Return(_a0 *Address, _a1 error) *MockCacheRepository_GetAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheRepository_GetAddress_Call) RunAndReturn(run func(string) (*Address, error)) *MockCacheRepository_GetAddress_Call {
	_c.Call.Return(run)
	return _c
}

// SetAddress provides a mock function with given fields: _a0, _a1
func (_m *MockCacheRepository) SetAddress(_a0 string, _a1 *Address) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *Address) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCacheRepository_SetAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAddress'
type MockCacheRepository_SetAddress_Call struct {
	*mock.Call
}

// SetAddress is a helper method to define mock.On call
//   - _a0 string
//   - _a1 *Address
func (_e *MockCacheRepository_Expecter) SetAddress(_a0 interface{}, _a1 interface{}) *MockCacheRepository_SetAddress_Call {
	return &MockCacheRepository_SetAddress_Call{Call: _e.mock.On("SetAddress", _a0, _a1)}
}

func (_c *MockCacheRepository_SetAddress_Call) Run(run func(_a0 string, _a1 *Address)) *MockCacheRepository_SetAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*Address))
	})
	return _c
}

func (_c *MockCacheRepository_SetAddress_Call) Return(_a0 error) *MockCacheRepository_SetAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCacheRepository_SetAddress_Call) RunAndReturn(run func(string, *Address) error) *MockCacheRepository_SetAddress_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockCacheRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCacheRepository creates a new instance of MockCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCacheRepository(t mockConstructorTestingTNewMockCacheRepository) *MockCacheRepository {
	mock := &MockCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
