// Code generated by mockery v2.20.0. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockLocationService is an autogenerated mock type for the LocationService type
type MockLocationService struct {
	mock.Mock
}

type MockLocationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLocationService) EXPECT() *MockLocationService_Expecter {
	return &MockLocationService_Expecter{mock: &_m.Mock}
}

// GetAddressByID provides a mock function with given fields: id
func (_m *MockLocationService) GetAddressByID(id string) (*Address, error) {
	ret := _m.Called(id)

	var r0 *Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Address, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *Address); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocationService_GetAddressByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAddressByID'
type MockLocationService_GetAddressByID_Call struct {
	*mock.Call
}

// GetAddressByID is a helper method to define mock.On call
//   - id string
func (_e *MockLocationService_Expecter) GetAddressByID(id interface{}) *MockLocationService_GetAddressByID_Call {
	return &MockLocationService_GetAddressByID_Call{Call: _e.mock.On("GetAddressByID", id)}
}

func (_c *MockLocationService_GetAddressByID_Call) Run(run func(id string)) *MockLocationService_GetAddressByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLocationService_GetAddressByID_Call) Return(_a0 *Address, _a1 error) *MockLocationService_GetAddressByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocationService_GetAddressByID_Call) RunAndReturn(run func(string) (*Address, error)) *MockLocationService_GetAddressByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueryAutoCompleteByText provides a mock function with given fields: input
func (_m *MockLocationService) GetQueryAutoCompleteByText(input string) ([]AutocompletePrediction, error) {
	ret := _m.Called(input)

	var r0 []AutocompletePrediction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]AutocompletePrediction, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(string) []AutocompletePrediction); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AutocompletePrediction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLocationService_GetQueryAutoCompleteByText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueryAutoCompleteByText'
type MockLocationService_GetQueryAutoCompleteByText_Call struct {
	*mock.Call
}

// GetQueryAutoCompleteByText is a helper method to define mock.On call
//   - input string
func (_e *MockLocationService_Expecter) GetQueryAutoCompleteByText(input interface{}) *MockLocationService_GetQueryAutoCompleteByText_Call {
	return &MockLocationService_GetQueryAutoCompleteByText_Call{Call: _e.mock.On("GetQueryAutoCompleteByText", input)}
}

func (_c *MockLocationService_GetQueryAutoCompleteByText_Call) Run(run func(input string)) *MockLocationService_GetQueryAutoCompleteByText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLocationService_GetQueryAutoCompleteByText_Call) Return(_a0 []AutocompletePrediction, _a1 error) *MockLocationService_GetQueryAutoCompleteByText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLocationService_GetQueryAutoCompleteByText_Call) RunAndReturn(run func(string) ([]AutocompletePrediction, error)) *MockLocationService_GetQueryAutoCompleteByText_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockLocationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockLocationService creates a new instance of MockLocationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockLocationService(t mockConstructorTestingTNewMockLocationService) *MockLocationService {
	mock := &MockLocationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
