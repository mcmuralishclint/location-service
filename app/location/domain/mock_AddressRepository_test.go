// Code generated by mockery v2.20.0. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockAddressRepository is an autogenerated mock type for the AddressRepository type
type MockAddressRepository struct {
	mock.Mock
}

type MockAddressRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddressRepository) EXPECT() *MockAddressRepository_Expecter {
	return &MockAddressRepository_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: id
func (_m *MockAddressRepository) GetByID(id string) (*Address, error) {
	ret := _m.Called(id)

	var r0 *Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Address, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *Address); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Address)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockAddressRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *MockAddressRepository_Expecter) GetByID(id interface{}) *MockAddressRepository_GetByID_Call {
	return &MockAddressRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockAddressRepository_GetByID_Call) Run(run func(id string)) *MockAddressRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAddressRepository_GetByID_Call) Return(_a0 *Address, _a1 error) *MockAddressRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressRepository_GetByID_Call) RunAndReturn(run func(string) (*Address, error)) *MockAddressRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// QueryAutoComplete provides a mock function with given fields: input
func (_m *MockAddressRepository) QueryAutoComplete(input string) ([]AutocompletePrediction, error) {
	ret := _m.Called(input)

	var r0 []AutocompletePrediction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]AutocompletePrediction, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(string) []AutocompletePrediction); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]AutocompletePrediction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressRepository_QueryAutoComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryAutoComplete'
type MockAddressRepository_QueryAutoComplete_Call struct {
	*mock.Call
}

// QueryAutoComplete is a helper method to define mock.On call
//   - input string
func (_e *MockAddressRepository_Expecter) QueryAutoComplete(input interface{}) *MockAddressRepository_QueryAutoComplete_Call {
	return &MockAddressRepository_QueryAutoComplete_Call{Call: _e.mock.On("QueryAutoComplete", input)}
}

func (_c *MockAddressRepository_QueryAutoComplete_Call) Run(run func(input string)) *MockAddressRepository_QueryAutoComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAddressRepository_QueryAutoComplete_Call) Return(_a0 []AutocompletePrediction, _a1 error) *MockAddressRepository_QueryAutoComplete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressRepository_QueryAutoComplete_Call) RunAndReturn(run func(string) ([]AutocompletePrediction, error)) *MockAddressRepository_QueryAutoComplete_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAddressRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAddressRepository creates a new instance of MockAddressRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAddressRepository(t mockConstructorTestingTNewMockAddressRepository) *MockAddressRepository {
	mock := &MockAddressRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
