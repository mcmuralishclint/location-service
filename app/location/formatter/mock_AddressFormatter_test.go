// Code generated by mockery v2.20.0. DO NOT EDIT.

package formatter

import (
	domain "github.com/mcmuralishclint/location-service/app/location/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockAddressFormatter is an autogenerated mock type for the AddressFormatter type
type MockAddressFormatter struct {
	mock.Mock
}

type MockAddressFormatter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAddressFormatter) EXPECT() *MockAddressFormatter_Expecter {
	return &MockAddressFormatter_Expecter{mock: &_m.Mock}
}

// FormatAddress provides a mock function with given fields: _a0
func (_m *MockAddressFormatter) FormatAddress(_a0 interface{}) (*domain.Address, error) {
	ret := _m.Called(_a0)

	var r0 *domain.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (*domain.Address, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(interface{}) *domain.Address); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressFormatter_FormatAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatAddress'
type MockAddressFormatter_FormatAddress_Call struct {
	*mock.Call
}

// FormatAddress is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockAddressFormatter_Expecter) FormatAddress(_a0 interface{}) *MockAddressFormatter_FormatAddress_Call {
	return &MockAddressFormatter_FormatAddress_Call{Call: _e.mock.On("FormatAddress", _a0)}
}

func (_c *MockAddressFormatter_FormatAddress_Call) Run(run func(_a0 interface{})) *MockAddressFormatter_FormatAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockAddressFormatter_FormatAddress_Call) Return(_a0 *domain.Address, _a1 error) *MockAddressFormatter_FormatAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressFormatter_FormatAddress_Call) RunAndReturn(run func(interface{}) (*domain.Address, error)) *MockAddressFormatter_FormatAddress_Call {
	_c.Call.Return(run)
	return _c
}

// FormatAddressSuggestion provides a mock function with given fields: _a0
func (_m *MockAddressFormatter) FormatAddressSuggestion(_a0 interface{}) ([]domain.AutocompletePrediction, error) {
	ret := _m.Called(_a0)

	var r0 []domain.AutocompletePrediction
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]domain.AutocompletePrediction, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []domain.AutocompletePrediction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AutocompletePrediction)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAddressFormatter_FormatAddressSuggestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatAddressSuggestion'
type MockAddressFormatter_FormatAddressSuggestion_Call struct {
	*mock.Call
}

// FormatAddressSuggestion is a helper method to define mock.On call
//   - _a0 interface{}
func (_e *MockAddressFormatter_Expecter) FormatAddressSuggestion(_a0 interface{}) *MockAddressFormatter_FormatAddressSuggestion_Call {
	return &MockAddressFormatter_FormatAddressSuggestion_Call{Call: _e.mock.On("FormatAddressSuggestion", _a0)}
}

func (_c *MockAddressFormatter_FormatAddressSuggestion_Call) Run(run func(_a0 interface{})) *MockAddressFormatter_FormatAddressSuggestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockAddressFormatter_FormatAddressSuggestion_Call) Return(_a0 []domain.AutocompletePrediction, _a1 error) *MockAddressFormatter_FormatAddressSuggestion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAddressFormatter_FormatAddressSuggestion_Call) RunAndReturn(run func(interface{}) ([]domain.AutocompletePrediction, error)) *MockAddressFormatter_FormatAddressSuggestion_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAddressFormatter interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAddressFormatter creates a new instance of MockAddressFormatter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAddressFormatter(t mockConstructorTestingTNewMockAddressFormatter) *MockAddressFormatter {
	mock := &MockAddressFormatter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
